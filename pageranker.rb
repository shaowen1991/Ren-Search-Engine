# Code authors:  Shaowen Ren(shaoren)

def write_data(filename, data)
  file = File.open(filename, "w")
  file.puts(data)
  file.close
end

def read_data(file_name)
  file = File.open(file_name,"r")
  object = eval(file.gets.untaint.encode('UTF-8', :invalid => :replace))
  file.close()
  return object
end

def calculate_pagerank(pagerank_table)
  i = 0
  
  while i < Iteration
    temp_PR_table = Hash.new()
    pagerank_table.keys.each do |page|
      temp_PR_table[page] = 0.0
    end

    temp_PR_table.keys.each do |page_in_calculation|
      if Link_hash[page_in_calculation].length == 0
        temp_PR_table.keys.each do |page|
          temp_PR_table[page] += (pagerank_table[page_in_calculation] / Url_size)
        end
        
      else
        Link_hash[page_in_calculation].each do |out_page|
          temp_PR_table[out_page] += (pagerank_table[page_in_calculation] / Link_hash[page_in_calculation].length())
        end
      end  
    end

    difference = 0.0
    temp_PR_table.keys.each do |page|
      temp_PR_table[page] = (1 - Damping_factor) / Url_size + (Damping_factor * temp_PR_table[page])
      #sum up all the difference between each old score and new score                                             
      difference += (temp_PR_table[page] - pagerank_table[page]).abs 
    end

    #pass the new score in this iteration to the PageRank table
    pagerank_table = temp_PR_table
    
    #if the difference is less than Delta, then break the loop
    if difference < Delta
      break
    else
      i += 1
    end
    
  end
  return pagerank_table
end



#######################################################
#              	main program   
#  sample running command: $ruby pageranker.rb 0.001 0.85 	        
#######################################################

abort "Command line should have at least 2 parameters." if ARGV.size<2

#if the difference between each iteration is less than Delta, then stop
#this will save running time and space when the size of URL is extremly large
Delta = ARGV[0].to_f

Damping_factor = ARGV[1].to_f
Iteration = 30 #this can change

#load the links relationship generated by the crawler into Link_hash
Link_hash = read_data('pagedata/linksnet.dat')
Url_size = Link_hash.keys.length()

#initialazing the PageRank score hash table
pagerank_table = Hash.new()
Link_hash.keys.each do |key|
  pagerank_table[key] = 1.0 / Url_size
end

write_data("pagedata/pagerank.dat",calculate_pagerank(pagerank_table))

puts ""
puts "complete writing PageRank!"
puts ""